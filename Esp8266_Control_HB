#include <Arduino.h>
#include <ArduinoJson.h>
#include <ESP8266WiFi.h>
#include <ESP8266WiFiMulti.h>
#include <Servo.h> 
#include <ESP8266HTTPClient.h>
#include <WiFiClient.h>
#include <SoftwareSerial.h>
//SoftwareSerial NodeSerial(D1, D2); // RX | TX
SoftwareSerial NodeSerial(13, 15); // RX | TX
//int t1 = 10;
int i = 0;
//int spo2;
//int heartRate;
//Ultrasonic
#define SOUND_VELOCITY 0.034
#define CM_TO_INCH 0.393701
long duration;
float distanceCm;
float distanceInch;
#define trigPin 16
#define echoPin 10
///////////////////////////////////////////////////
//MAX30105
/*
#include <Wire.h>
#include "MAX30105.h"
#include "heartRate.h"
MAX30105 particleSensor;
const byte RATE_SIZE = 4;
byte rates[RATE_SIZE];
byte rateSpot = 0;
long lastBeat = 0; 
float beatsPerMinute;
int beatAvg;
unsigned long lastMeasurementTime = 0; //Time at which the last measurement occurred
const unsigned long MEASUREMENT_INTERVAL = 5000; //Measurement interval in milliseconds (1 second)
*/
///////////////////////////////////////////////////
//GY-906-BCC MLX90614
#include <Adafruit_MLX90614.h>
Adafruit_MLX90614 mlx = Adafruit_MLX90614();
//////////////////////////
ESP8266WiFiMulti WiFiMulti;
String payload;
String payload2;
String payload3;
String payload4;
String payload5;
String payload6;
String payload7;
String payload8;
Servo servo1;  
Servo servo2;  
Servo servo3;  

int start_temp = 0;
#define ir A0
int v_ir = 0;

long microsecondsToCentimeters(long microseconds){
  return microseconds / 29 / 2;
}
void setup() {
  pinMode(ir, INPUT); 
  pinMode(start_temp,OUTPUT);
  //delay(2500);
  digitalWrite(start_temp, 0);

//pinMode(D1, INPUT);
 // pinMode(D2, OUTPUT);
  Serial.begin(115200);
  NodeSerial.begin(57600);
  Serial.println();
  Serial.println("NodeMCU/ESP8266 Run");

    for (uint8_t t = 4; t > 0; t--) {
    Serial.printf("[SETUP] WAIT %d...\n", t);
    Serial.flush();
    delay(1000);
  }

  WiFi.mode(WIFI_STA);
  WiFiMulti.addAP("LKH8920", "17Bi16@9");
  // Serial.setDebugOutput(true);
  servo1.attach(D6);
  servo2.attach(D5);
  servo3.attach(D4);
  servo3.write(0);
  servo2.write(0);
  servo1.write(0);

  pinMode(trigPin, OUTPUT); // Sets the trigPin as an Output
  pinMode(echoPin, INPUT); // Sets the echoPin as an Input
//////////////////////////////////////////////////////////////////////////////////////////////////MAX30105
/*if (!particleSensor.begin(Wire, I2C_SPEED_FAST)) //Use default I2C port, 400kHz speed{
    Serial.println("MAX30105 was not found. Please check wiring/power. ");
    while (1);
  }
  Serial.println("Place your index finger on the sensor with steady pressure.");

  particleSensor.setup(); //Configure sensor with default settings
  particleSensor.setPulseAmplitudeRed(0x0A); //Turn Red LED to low to indicate sensor is running
  particleSensor.setPulseAmplitudeGreen(0); //Turn off Green LED
*/
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
  //gy906
  mlx.begin();
////////////////////////////////////////////////////////////  

}

void loop() {

 
  v_ir = analogRead(ir);
  v_ir = map(v_ir, 0, 1023, 0, 1);

  if ((WiFiMulti.run() == WL_CONNECTED)) {

    WiFiClient client;

    HTTPClient http;

    Serial.print("[HTTP] begin...\n");
    if (http.begin(client, "http://10.232.4.111:8080/project/DB/get/test/GetData.php?ID=9")) {  // HTTP
        Serial.print("[HTTP] GET...\n");
        // start connection and send HTTP header
        int httpCode = http.GET();
        // httpCode will be negative on error
        if (httpCode > 0) {
          // HTTP header has been send and Server response header has been handled
          Serial.printf("[HTTP] GET... code: %d\n", httpCode);
          // file found at server
          if (httpCode == HTTP_CODE_OK || httpCode == HTTP_CODE_MOVED_PERMANENTLY) {
            payload = http.getString();
          }
        } else {
          Serial.printf("[HTTP] GET... failed, error: %s\n", http.errorToString(httpCode).c_str());
        }

        http.end();
      } else {
        Serial.println("[HTTP] Unable to connect");
      }
    }
    DynamicJsonDocument doc(1024);
    deserializeJson(doc, payload);


    String stat1 = doc["Status_Onoff"];
    //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
  if ((WiFiMulti.run() == WL_CONNECTED)) {

      WiFiClient client2;

      HTTPClient http2;

      Serial.print("[HTTP] begin...\n");
      if (http2.begin(client2, "http://10.232.4.111:8080/project/DB/get/test/GetData.php?ID=10")) {  // HTTP

        // start connection and send HTTP header
        int httpCode2 = http2.GET();
        // httpCode will be negative on error
        if (httpCode2 > 0) {
          // HTTP header has been send and Server response header has been handled
          Serial.printf("[HTTP] GET... code: %d\n", httpCode2);
          // file found at server
          if (httpCode2 == HTTP_CODE_OK || httpCode2 == HTTP_CODE_MOVED_PERMANENTLY) {
            payload2 = http2.getString();
          }
        } else {
          Serial.printf("[HTTP] GET... failed, error: %s\n", http2.errorToString(httpCode2).c_str());
        }

        http2.end();
      } else {
        Serial.println("[HTTP] Unable to connect");
      }
    }
    DynamicJsonDocument doc2(1024);
    deserializeJson(doc2, payload2);


    String stat2 = doc2["Status_Onoff"];
    //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////2
  if ((WiFiMulti.run() == WL_CONNECTED)) {

      WiFiClient client3;

      HTTPClient http3;

      Serial.print("[HTTP] begin...\n");
      if (http3.begin(client3, "http://10.232.4.111:8080/project/DB/get/test/GetData.php?ID=11")) {  // HTTP

        // start connection and send HTTP header
        int httpCode3 = http3.GET();
        // httpCode will be negative on error
        if (httpCode3 > 0) {
          // HTTP header has been send and Server response header has been handled
          Serial.printf("[HTTP] GET... code: %d\n", httpCode3);
          // file found at server
          if (httpCode3 == HTTP_CODE_OK || httpCode3 == HTTP_CODE_MOVED_PERMANENTLY) {
            payload3 = http3.getString();
          }
        } else {
          Serial.printf("[HTTP] GET... failed, error: %s\n", http3.errorToString(httpCode3).c_str());
        }

        http3.end();
      } else {
        Serial.println("[HTTP] Unable to connect");
      }
    }
    DynamicJsonDocument doc3(1024);
    deserializeJson(doc3, payload3);


    String stat3 = doc3["Status_Onoff"];
    //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////3

    if ((WiFiMulti.run() == WL_CONNECTED)) {

      WiFiClient client5;

      HTTPClient http5;

      Serial.print("[HTTP] begin...\n");
      if (http5.begin(client5, "http://10.232.4.111:8080/project/DB/get/test/GetDatas.php?ID=1")) {  // HTTP
        Serial.print("[HTTP] GET...\n");
        // start connection and send HTTP header
        int httpCode5 = http5.GET();
        // httpCode will be negative on error
        if (httpCode5 > 0) {
          // HTTP header has been send and Server response header has been handled
          Serial.printf("[HTTP] GET... code: %d\n", httpCode5);
          // file found at server
          if (httpCode5 == HTTP_CODE_OK || httpCode5 == HTTP_CODE_MOVED_PERMANENTLY) {
            payload5 = http5.getString();

          }
        } else {
          Serial.printf("[HTTP] GET... failed, error: %s\n", http5.errorToString(httpCode5).c_str());
        }

        http5.end();
      } else {
        Serial.println("[HTTP] Unable to connect");
      }
    }
    DynamicJsonDocument doc5(1024);
    deserializeJson(doc5, payload5);

    String id1 = doc5["Status_success"];

    //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////1
  if ((WiFiMulti.run() == WL_CONNECTED)) {

      WiFiClient client6;

      HTTPClient http6;

      Serial.print("[HTTP] begin...\n");
      if (http6.begin(client6, "http://10.232.4.111:8080/project/DB/get/test/GetDatas.php?ID=2")) {  // HTTP

        // start connection and send HTTP header
        int httpCode6 = http6.GET();
        // httpCode will be negative on error
        if (httpCode6 > 0) {
          // HTTP header has been send and Server response header has been handled
          Serial.printf("[HTTP] GET... code: %d\n", httpCode6);
          // file found at server
          if (httpCode6 == HTTP_CODE_OK || httpCode6 == HTTP_CODE_MOVED_PERMANENTLY) {
            payload6 = http6.getString();

          }
        } else {
          Serial.printf("[HTTP] GET... failed, error: %s\n", http6.errorToString(httpCode6).c_str());
        }

        http6.end();
      } else {
        Serial.println("[HTTP] Unable to connect");
      }
    }
    DynamicJsonDocument doc6(1024);
    deserializeJson(doc6, payload6);

    String id2 = doc6["Status_success"];

    //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////6
  if ((WiFiMulti.run() == WL_CONNECTED)) {

      WiFiClient client7;

      HTTPClient http7;

      Serial.print("[HTTP] begin...\n");
      if (http7.begin(client7, "http://10.232.4.111:8080/project/DB/get/test/GetDatas.php?ID=3")) {  // HTTP

        // start connection and send HTTP header
        int httpCode7 = http7.GET();
        // httpCode will be negative on error
        if (httpCode7 > 0) {
          // HTTP header has been send and Server response header has been handled
          Serial.printf("[HTTP] GET... code: %d\n", httpCode7);
          // file found at server
          if (httpCode7 == HTTP_CODE_OK || httpCode7 == HTTP_CODE_MOVED_PERMANENTLY) {
            payload7 = http7.getString();

          }
        } else {
          Serial.printf("[HTTP] GET... failed, error: %s\n", http7.errorToString(httpCode7).c_str());
        }

        http7.end();
      } else {
        Serial.println("[HTTP] Unable to connect");
      }
    }
    DynamicJsonDocument doc7(1024);
    deserializeJson(doc7, payload7);

    String id3 = doc7["Status_success"];

    //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////7

    Serial.println(id1);
    Serial.print(stat1);
    Serial.println(id2);
    Serial.print(stat2);
    Serial.println(id3);
    Serial.print(stat3);

    if(id1 == "success"){
      if(stat2 == "On"){

        servo2.write(90);
          delay(1500);
        Serial.println("1:On");
        servo2.write(0);
      }else{
        Serial.println("1:OFF");
      }
    }if(id2 == "success"){
      if(stat3 == "On"){

        servo3.write(90);
          delay(1500);
        Serial.println("2:On");
        servo3.write(0);    
      }else{
        Serial.println("2:OFF");
      }
    }if(id3 == "success"){
      if(stat1 == "On"){

        servo1.write(90);
          delay(1500);
        Serial.println("3:On");
        servo1.write(0);
      }else{
        Serial.println("3:OFF");
      }
    
    }
  if(NodeSerial.available() > 0){
    if(id1 == "success"){
      if(NodeSerial.read() == '2'){
        WiFiClient client101;
        HTTPClient http101;
        String payload101 = "id=2&status=success";
        http101.begin(client101, "http://10.232.4.111:8080/Project/update/health_box_symptoms.php");
        http101.addHeader("Content-Type", "application/x-www-form-urlencoded");
        int httpCode = http101.POST(payload101);
        String response = http101.getString();
        http101.end();  
      }
    }
    if(id2 == "success"){
      if(NodeSerial.read() == '3'){
        WiFiClient client102;
        HTTPClient http102;
        String payload102 = "id=3&status=success";
        http102.begin(client102, "http://10.232.4.111:8080/Project/update/health_box_symptoms.php");
        http102.addHeader("Content-Type", "application/x-www-form-urlencoded");
        int httpCode = http102.POST(payload102);
        String response = http102.getString();
        http102.end();
      }
    }
    if(id3 == "success"){
        if(NodeSerial.read() == '4'){
          WiFiClient client103;
          HTTPClient http103;
          String payload103 = "id=4&status=success";
          http103.begin(client103, "http://10.232.4.111:8080/Project/update/health_box_symptoms.php");
          http103.addHeader("Content-Type", "application/x-www-form-urlencoded");
          int httpCode = http103.POST(payload103);
          String response = http103.getString();
          http103.end();
      }
    }
  }
  digitalWrite(trigPin, LOW);
  delayMicroseconds(2);
  digitalWrite(trigPin, HIGH);
  delayMicroseconds(10);
  digitalWrite(trigPin, LOW);
  duration = pulseIn(echoPin, HIGH);
  distanceCm = duration * SOUND_VELOCITY/2;
  Serial.print("Distance (cm): ");
  Serial.println(distanceCm);

  if(v_ir == 1){
    if (NodeSerial.available() > 0){
      
      Serial.print("Object = "); //////////////////////////////////////////////////////////////////////////////////////////////////////
      Serial.print(mlx.readObjectTempC()); Serial.println("*C");
      int heartRate_i = NodeSerial.parseInt();
      int spo2_i = NodeSerial.parseInt();
      Serial.println("hr :");
      Serial.println(heartRate_i );
      Serial.println( " sp: " );
      Serial.println(spo2_i);
      if (NodeSerial.read() == 's'){
        
                HTTPClient httpidp;
                String urlidp = "http://10.232.4.111:8080/project/DB/get/room.php";
                WiFiClient clientidp;
                httpidp.begin(clientidp,urlidp);
                int httpCode = httpidp.GET();
                String payloadidp = httpidp.getString();
                Serial.println(payloadidp);
                // Parse JSON
                const size_t capacity = JSON_ARRAY_SIZE(3) + 3 * JSON_OBJECT_SIZE(3) + 160;
                DynamicJsonDocument docidp(capacity);
                deserializeJson(docidp, payloadidp);
                JsonArray data = docidp["data"];
                
                  if( id1 =="success" ){
                        Serial.print("print ID 8 ");
                        String spo2, pulse, temp, postData,Healthbox_ID;
                        int Patient_ID;
                        Patient_ID = data[0]["IDp"];
                        spo2 = spo2_i;
                        pulse = heartRate_i;
                        Healthbox_ID = 9;
                        temp = String(mlx.readObjectTempC());  
                        if(temp.toInt() >1000){
                          temp = temp.toInt()-1000;
                          temp = String(temp.toInt());
                        }
                        Serial.println(mlx.readObjectTempC());
                        postData = "&Patient_ID=" + String(Patient_ID) + "&spo2=" + spo2 + "&pulse=" + pulse + "&temp=" + temp + "&Healthbox_ID=" + Healthbox_ID  ;
                        Serial.println(postData);
                        WiFiClient client9;
                        HTTPClient httpin;  
                        httpin.begin(client9,"http://10.232.4.111:8080/Project/insert_board_esp8266/InsertDB.php");    
                        httpin.addHeader("Content-Type", "application/x-www-form-urlencoded");          
                        int httpCodein = httpin.POST(postData);   
                        String payload = httpin.getString();    
                        httpin.end();  //Close connection
                        //********************************************************************
                        
                  }
                
               
                  if( id2 =="success" ){ /////////////////////////////////////////////////////////////////////////////////////////////////////////////////// 
                      Serial.print("print ID 9 ");
                      String spo2, pulse, temp, postData,Healthbox_ID;
                      int Patient_ID;
                      Patient_ID = data[1]["IDp"];
                      spo2 = spo2_i;
                      pulse = heartRate_i;
                      Healthbox_ID = 10;
                      temp = String(mlx.readObjectTempC()); 
                      if(temp.toInt() >1000){
                          temp = temp.toInt()-1000;
                          temp = String(temp.toInt());
                        } 
                        postData = "&Patient_ID=" + String(Patient_ID) + "&spo2=" + spo2 + "&pulse=" + pulse + "&temp=" + temp + "&Healthbox_ID=" + Healthbox_ID  ;
                      Serial.println(postData);
                      WiFiClient client10;
                      HTTPClient httpin;
                      httpin.begin(client10,"http://10.232.4.111:8080/Project/insert_board_esp8266/InsertDB.php");    
                      httpin.addHeader("Content-Type", "application/x-www-form-urlencoded");          
                      int httpCodein = httpin.POST(postData);   
                      String payload = httpin.getString();    
                      httpin.end();  //Close connection
                      //********************************************************************
                      
                    }
                    
               
                  if(id3 =="success"){/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                        Serial.print("print ID 10 ");
                        String spo2, pulse, temp, postData,Healthbox_ID;
                        int Patient_ID;
                        Patient_ID = data[2]["IDp"];
                        spo2 = spo2_i;
                        pulse = heartRate_i;
                        Healthbox_ID = 12;
                        temp = String(mlx.readObjectTempC());  
                        if(temp.toInt() >1000){
                          temp = temp.toInt()-1000;
                          temp = String(temp.toInt());
                        }
                        postData = "&Patient_ID=" + String(Patient_ID) + "&spo2=" + spo2 + "&pulse=" + pulse + "&temp=" + temp + "&Healthbox_ID=" + Healthbox_ID  ;
                        Serial.println(postData);
                        WiFiClient client11;
                        HTTPClient httpin;
                        httpin.begin(client11,"http://10.232.4.111:8080/Project/insert_board_esp8266/InsertDB.php");    
                        httpin.addHeader("Content-Type", "application/x-www-form-urlencoded");          
                        int httpCodein = httpin.POST(postData);   
                        String payload = httpin.getString();    
                        httpin.end();  //Close connection
                        //********************************************************************
                        
                  }
                
                  
          httpidp.end(); 
        }
      
    }
  
  }
  
  
  delay(300);
}
